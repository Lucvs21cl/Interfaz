# -*- coding: utf-8 -*-
"""Airline Passenger Satisfaction K-Means Clustering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/lucvs21cl/airline-passenger-satisfaction-k-means-clustering.104eb81a-3b14-4aa8-8eb1-a34740447e57.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250615/auto/storage/goog4_request%26X-Goog-Date%3D20250615T164730Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D6a967ca61ec2f57ea762d32eef7ee72d677dee75481868e26fe7ab4f5d55f70d237e99176a1c46cc994ce1cdd9aace0cc8d00457af066238e3a7db8e8672b9e94c3d53f8c32f894a06b55d2912a09ffccbdf91c2bc801b5e85e32190dc0369081d3b6269161c5fa85fab041d76133bfc895b369cdd748a0472b1ad789443bcc0e6cff72d62f6703564e3b37b944413fb0d339b3133897558af449be240681b9e3c542b2b769ed4a11dd5aab9c4e1b1029ba07e9b9cb73d91e00c47d74dfe60d93f50607d38b3de1c5d29c02bca32f9e14d24041eccb31eafb25a74bd8fcc744dff52dc2e57cc76d8b97c2bbb8c688da9d46e990633deaa03249c1a05e1880bc3
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
teejmahal20_airline_passenger_satisfaction_path = kagglehub.dataset_download('teejmahal20/airline-passenger-satisfaction')

print('Data source import complete.')

"""# Airline Passenger Satisfaction K-Means Clustering

## Import Packages and Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import colors
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer
import joblib

import os

# Obtener la ruta del directorio actual
current_dir = os.path.dirname(os.path.abspath(__file__))
csv_path = os.path.join(current_dir, "test.csv")
data = pd.read_csv(csv_path, sep=",")

"""## Explore Data"""

data.head()

"""**Explore data.info() and data.describe()**
- No null data for all columns
- There are some categorical features that we need encode to numbers later.
- Satisfaction Levels columns (Ranging from 0 to 5) are Inflight wifi service, Departure/Arrival time convenient, Ease of Online booking, Gate location, Food and drink, Online boarding, Seat comfort, Inflight entertainment, On-board service, Leg room service, Baggage handling, Checkin service, Inflight service, and Cleanliness
"""

data.info(verbose=True)

data.describe()

"""###

**Explore Categorical Features**
"""

print(data['Gender'].value_counts(), '\n')
print(data['Customer Type'].value_counts(), '\n')
print(data['Type of Travel'].value_counts(), '\n')
print(data['Class'].value_counts(), '\n')
print(data['satisfaction'].value_counts(), '\n')

"""**Data Cleaning**
- Remove records where Inflight wifi service was Not Applicable (0) since there was not a lot. Keeping the 0 may be confusing since it may seem like it has a low satisfaction.
- Remove records where Class was Eco Plus since there was not a lot. This may reduce some noise for market segmentation.
- Encode categorical features to numbers.
- Remove unused columns.
"""

print('Number of missing data for Inflight wifi service', (data['Inflight wifi service'] == 0).sum())
print('Number of avaiable data for Inflight wifi service', (data['Inflight wifi service'] != 0).sum())
data = data[data['Inflight wifi service'] != 0]
data = data[data['Class'] != 'Eco Plus']

data['Gender'] = data['Gender'].map({'Female': 0, 'Male': 1})
data['Customer Type'] = data['Customer Type'].map({'Loyal Customer': 0, 'disloyal Customer': 1})
data['Type of Travel'] = data['Type of Travel'].map({'Business travel': 0, 'Personal Travel': 1})
data['Class'] = data['Class'].map({'Business': 0, 'Eco': 1})
data['satisfaction'] = data['satisfaction'].map({'neutral or dissatisfied': 0, 'satisfied': 1})

data = data.drop('id', axis=1)
data = data.loc[:, ~data.columns.str.contains('^Unnamed')]

"""**Explore Correlations**"""

correlations = data.corr()
threshold = 0.5
high_correlations = correlations[(correlations >= threshold) | (correlations <= -1*threshold)]
sns.set_theme(rc={'figure.figsize':(11.7,8.27)})
sns.heatmap(high_correlations, annot=True, cmap='coolwarm')
plt.show()

"""**Transform**
- Drop Arrival Delay in Minutes because it has a 0.97 correlation with Departure Delay in Minutes.
- Scale data
- Reduce dimensions
"""

data = data.drop(['Arrival Delay in Minutes'], axis=1)

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

pca = PCA(n_components=3, random_state=42)
pca.fit(data_scaled)
data_pca = pd.DataFrame(pca.transform(data_scaled), columns=(['col1', 'col2', 'col3']))
data_pca.describe().T

"""## Clustering"""

elbow = KElbowVisualizer(KMeans(n_init=10), k=10)
elbow.fit(data_pca)
elbow.show()

data_scaled = pd.DataFrame(data_scaled, columns = data.columns)

# Use k = 4 from Elbow
model = KMeans(n_clusters=4, random_state=42, n_init=10)
predictions = model.fit_predict(data_pca)
data_pca['Cluster'] = predictions
data['Cluster'] = predictions
data_scaled['Cluster'] = predictions

#Plotting the clusters
x = data_pca['col1']
y = data_pca['col2']
z = data_pca['col3']
cmap = colors.ListedColormap(["#682F2F", "#9E726F", "#D6B2B1", "#B9C0C9", "#9F8A78", "#F3AB60"])
fig = plt.figure(figsize=(10,8))
ax = plt.subplot(111, projection='3d', label='bla')
ax.scatter(x, y, z, s=40, c=data_pca['Cluster'], marker='o', cmap = cmap )
plt.show()

"""## Evaluation"""

#Plotting countplot of clusters
print('Relatively fairly distributed clusters.')
pal = ["#682F2F","#B9C0C9", "#9F8A78","#F3AB60"]
pl = sns.countplot(x = 'Cluster', data = data, hue = 'Cluster', palette = pal)
pl.set_title("Distribution Of Clusters")
plt.show()

cluster = data.groupby(['Cluster']).mean().T
cluster.style.background_gradient(cmap='RdYlGn',axis=1)

"""## Profiles

#### Group 0 Highlights - The Frequent/Loyal Travelling Business Flyers
- Demographics:
    - Age has Older people.
    - Customer Type has the most Loyal Customers.
    - Type of Travel has the most Business Travels.
    - Class has the most Business classes.
    - Flight Distance has the furthest distances.
- This group is almost least critical/most appreciative/most lenient for all satisfaction categories.
- Others:
    - Delay the least in minutes.
    - Satisfaction is the highest.
- Notes: Frequent/Loyal Business flyers contribute the least amount of minutes to flight delays. Their many past flying experiences may contribute to a deeper leniency and
understanding towards the overall flight experience which may contribute to the higher overall satisfaction levels.

#### Group 1 Highlights - The Young Crowd
- Demographics:
    - Age group has the Youngest.
    - Customer Type has the most disloyal Customers.
    - Type of Travel has the most Personal Travels.
    - Class has the most Economy classes.
    - Flight Distance has the shortest distances.
- This group is critical the most for:
    - Food and drink
    - Online boarding
    - Seat comfort
    - Inflight entertainment
    - Cleanliness
- Others:
    - Delay the most in minutes.
    - Satisfaction is the lowest.
- Notes: Young people on vacation with a smaller budget tend to care most for their cinematic experience during the flight.
It seems they also tend to cause delays and are the most difficult to please.

#### Group 2 Highlights - The Infrequent Travelling Business Flyers
- Demographics:
    - Age group has more Older people.
    - Type of Travel lean towards more Business Travels.
    - Class lean towards more Business classes.
    - Flight Distance lean towards further distances.
- This group is critical the most for:
    - Inflight wifi service
    - Departure/Arrival time convenient
    - Ease of Online booking
    - Gate location
- This group is appreciative for:
    - Food and drink
    - Online boarding
    - Seat comfort
    - Inflight entertainment
    - On-board service
    - Leg room service
    - Baggage handling
    - Checkin service
    - Inflight service
    - Cleanliness
- Notes: The infrequent business flyers who travel maybe once or twice a year. Their lack of flying experience is reflected with their critique on flight schedule/logistics and about technologic ease for travelling.
As they are on a professional business, they may be more keen to be more appreciative of the service workers during the flight experience.

#### Group 3 Highlights - The Infrequent Family Vacation Flyers
- Demographics:
    - Age group has more Older people.
    - Type of Travel has more Personal Travels.
    - Class has more Economy classes.
- This group is critical the most for
    - On-board service
    - Leg room service
    - Baggage handling
    - Checkin service
    - Inflight service
- Notes: Frugal Parents on vacation who may already be stressed from looking over their kids and may be looking for good service and accomodations
to decrease the level of their stress. Once they are inflight they are not as critical except for the leg room which could be that they are carrying extra
stuff or need extra space to take care of their kids. They have other stuff to worry about than food, cleanliness, inflight entertainment.
"""

# Guardar el modelo y el scaler
import joblib

# Guardar el modelo KMeans
joblib.dump(model, os.path.join(current_dir, 'kmeans_model.joblib'))
# Guardar el scaler
joblib.dump(scaler, os.path.join(current_dir, 'scaler.joblib'))
# Guardar el PCA
joblib.dump(pca, os.path.join(current_dir, 'pca.joblib'))
# Guardar el orden de las columnas (excluyendo 'Cluster')
columnas_para_guardar = [col for col in data.columns if col != 'Cluster']
joblib.dump(columnas_para_guardar, os.path.join(current_dir, 'columnas.joblib'))

print("Modelo, scaler, PCA y orden de columnas guardados exitosamente.")